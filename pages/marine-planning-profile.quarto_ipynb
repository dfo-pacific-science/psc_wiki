{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Marine Planning Profile\"\n",
        "format: \n",
        "  html:\n",
        "    css: ../assets/css/marine_planning.css\n",
        "    toc: true\n",
        "    toc-depth: 2\n",
        "    code-fold: true\n",
        "execute:\n",
        "  echo: false\n",
        "  warning: false\n",
        "  message: false\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "339026cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from IPython.display import HTML, display\n",
        "import json\n",
        "\n",
        "# Read the Excel file (placeholder - will need actual marine planning data file)\n",
        "try:\n",
        "    import os\n",
        "    file_path = '../assets/data/marine_planning.xlsx'  # You'll need to create this file\n",
        "    print(f\"Attempting to read file: {file_path}\")\n",
        "    print(f\"File exists: {os.path.exists(file_path)}\")\n",
        "    \n",
        "    if os.path.exists(file_path):\n",
        "        df = pd.read_excel(file_path)\n",
        "        print(f\"Successfully loaded {len(df)} marine planning records\")\n",
        "    else:\n",
        "        # Create sample data for demonstration\n",
        "        print(\"Creating sample marine planning data...\")\n",
        "        sample_data = {\n",
        "            'Planning Area': [\n",
        "                'Strait of Georgia', 'Juan de Fuca Strait', 'West Coast Vancouver Island',\n",
        "                'Central Coast', 'North Coast', 'Haida Gwaii',\n",
        "                'Dixon Entrance', 'Hecate Strait', 'Queen Charlotte Sound',\n",
        "                'Johnstone Strait', 'Discovery Passage', 'Burrard Inlet'\n",
        "            ],\n",
        "            'Region': ['South Coast', 'South Coast', 'WCVI', 'Central Coast', 'North Coast', 'Haida Gwaii'] * 2,\n",
        "            'Primary Focus': ['Salmon Migration', 'Spawning Areas', 'Feeding Areas', 'Critical Habitat', 'Migration Routes', 'Nursery Areas'] * 2\n",
        "        }\n",
        "        df = pd.DataFrame(sample_data)\n",
        "        print(f\"Created sample data with {len(df)} marine planning records\")\n",
        "        \n",
        "except Exception as e:\n",
        "    print(f\"Error loading data: {e}\")\n",
        "    # Create minimal sample data\n",
        "    df = pd.DataFrame({\n",
        "        'Planning Area': ['Sample Marine Area 1', 'Sample Marine Area 2'],\n",
        "        'Region': ['South Coast', 'North Coast'],\n",
        "        'Primary Focus': ['Salmon Habitat', 'Migration Routes']\n",
        "    })"
      ],
      "id": "a02e9f23",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Overview\n",
        "\n",
        "This page contains profiles of **{{< meta title >}}** for Pacific salmon conservation. The data includes information on `{python} len(df) if not df.empty else 0` marine planning areas.\n",
        "\n",
        "## Search and Filter"
      ],
      "id": "f4bf46fd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from IPython.display import HTML\n",
        "\n",
        "# Always display search controls, even if no data\n",
        "display(HTML(\"\"\"\n",
        "<div class=\"search-controls\">\n",
        "    <input type=\"text\" id=\"searchInput\" placeholder=\"Search marine areas...\" onkeyup=\"filterList()\">\n",
        "    <select id=\"focusFilter\" onchange=\"filterList()\">\n",
        "        <option value=\"\">All Focus Areas</option>\n",
        "    </select>\n",
        "    <select id=\"regionFilter\" onchange=\"filterList()\">\n",
        "        <option value=\"\">All Regions</option>\n",
        "    </select>\n",
        "</div>\n",
        "\"\"\"))"
      ],
      "id": "7d11ab96",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Marine Planning Areas\n",
        "###### Click each item to view details"
      ],
      "id": "58913d7f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "if df.empty:\n",
        "    display(HTML(\"\"\"\n",
        "    <p>No data to display.</p>\n",
        "    <div class=\"marine-list-wrapper\" style=\"display: none;\">\n",
        "        <div id=\"marineList\" class=\"marine-list\">\n",
        "            <div class=\"marine-item\">No Data</div>\n",
        "        </div>\n",
        "    </div>\n",
        "    \"\"\"))\n",
        "\n",
        "if not df.empty:\n",
        "    # Create two-column list of marine planning area names\n",
        "    html_list = '<div class=\"marine-list-wrapper\">\\n<div id=\"marineList\" class=\"marine-list\">\\n'\n",
        "    \n",
        "    for idx, row in df.iterrows():\n",
        "        area_name = str(row['Planning Area']) if pd.notna(row['Planning Area']) else 'Unknown Area'\n",
        "        focus = str(row['Primary Focus']) if pd.notna(row['Primary Focus']) else 'Unknown'\n",
        "        region = str(row['Region']) if pd.notna(row['Region']) else 'Unknown'\n",
        "        \n",
        "        html_list += f'''\n",
        "        <div class=\"marine-item clickable-item\" onclick=\"showMarineDetails({idx})\" data-focus=\"{focus}\" data-region=\"{region}\">\n",
        "            <div class=\"marine-name\">{area_name}</div>\n",
        "            <div class=\"marine-meta\">{focus} • {region}</div>\n",
        "        </div>\n",
        "        '''\n",
        "    \n",
        "    html_list += '</div>\\n</div>'\n",
        "    display(HTML(html_list))\n",
        "else:\n",
        "    display(HTML(\"<p>No suitable data found for display.</p>\"))"
      ],
      "id": "f77d4e4c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Always display the detail view HTML elements\n",
        "display(HTML('''\n",
        "<div id=\"detailView\" style=\"display: none;\">\n",
        "    <button onclick=\"hideDetails()\" class=\"back-button\">← Back to List</button>\n",
        "    <div id=\"detailContent\"></div>\n",
        "</div>\n",
        "'''))"
      ],
      "id": "894a113e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create JavaScript data object - always define, even if empty\n",
        "import json\n",
        "\n",
        "if not df.empty:\n",
        "    df_json = df.to_json(orient='records')\n",
        "    columns_list = json.dumps(list(df.columns))\n",
        "else:\n",
        "    df_json = \"[]\"\n",
        "    columns_list = \"[]\"\n",
        "\n",
        "js_code = f\"\"\"\n",
        "<script>\n",
        "const marineData = {df_json};\n",
        "const allColumns = {columns_list};\n",
        "\n",
        "// Populate focus and region filters\n",
        "window.addEventListener('DOMContentLoaded', function() {{\n",
        "    const focusFilter = document.getElementById('focusFilter');\n",
        "    const regionFilter = document.getElementById('regionFilter');\n",
        "    \n",
        "    if (focusFilter && marineData && marineData.length > 0) {{\n",
        "        const focuses = [...new Set(marineData.map(item => item['Primary Focus'] || item.focus).filter(f => f && f !== 'N/A'))].sort();\n",
        "        focuses.forEach(f => {{\n",
        "            const option = document.createElement('option');\n",
        "            option.value = f;\n",
        "            option.textContent = f;\n",
        "            focusFilter.appendChild(option);\n",
        "        }});\n",
        "    }}\n",
        "    \n",
        "    if (regionFilter && marineData && marineData.length > 0) {{\n",
        "        const regions = [...new Set(marineData.map(item => item.Region || item.region).filter(r => r && r !== 'N/A'))].sort();\n",
        "        regions.forEach(r => {{\n",
        "            const option = document.createElement('option');\n",
        "            option.value = r;\n",
        "            option.textContent = r;\n",
        "            regionFilter.appendChild(option);\n",
        "        }});\n",
        "    }}\n",
        "}});\n",
        "\n",
        "function filterList() {{\n",
        "    const searchTerm = document.getElementById('searchInput').value.toLowerCase();\n",
        "    const focusFilter = document.getElementById('focusFilter').value;\n",
        "    const regionFilter = document.getElementById('regionFilter').value;\n",
        "    const items = document.querySelectorAll('.marine-item');\n",
        "    \n",
        "    items.forEach(item => {{\n",
        "        let showItem = true;\n",
        "        \n",
        "        // Search filter\n",
        "        if (searchTerm) {{\n",
        "            const itemText = item.textContent.toLowerCase();\n",
        "            if (!itemText.includes(searchTerm)) {{\n",
        "                showItem = false;\n",
        "            }}\n",
        "        }}\n",
        "        \n",
        "        // Focus filter\n",
        "        if (focusFilter && item.dataset.focus !== focusFilter) {{\n",
        "            showItem = false;\n",
        "        }}\n",
        "        \n",
        "        // Region filter\n",
        "        if (regionFilter && item.dataset.region !== regionFilter) {{\n",
        "            showItem = false;\n",
        "        }}\n",
        "        \n",
        "        item.style.display = showItem ? 'block' : 'none';\n",
        "    }});\n",
        "}}\n",
        "\n",
        "function showMarineDetails(index) {{\n",
        "    // Safety checks\n",
        "    if (!marineData || marineData.length === 0 || index >= marineData.length || index < 0) {{\n",
        "        console.error('Invalid data or index for showMarineDetails');\n",
        "        return;\n",
        "    }}\n",
        "    \n",
        "    const marine = marineData[index];\n",
        "    const detailView = document.getElementById('detailView');\n",
        "    const detailContent = document.getElementById('detailContent');\n",
        "    \n",
        "    if (!marine || !detailView || !detailContent) return;\n",
        "    \n",
        "    let html = `<h2>${{marine['Planning Area'] || 'Marine Planning Profile'}}</h2>`;\n",
        "    \n",
        "    // Key Threats / Pressures\n",
        "    html += '<div class=\"detail-section\"><h3><i>Key Threats / Pressures</i></h3>';\n",
        "    html += '<table class=\"data-table\">';\n",
        "    html += '<tbody>';\n",
        "    for (let i = 0; i < 3; i++) {{\n",
        "        html += '<tr>';\n",
        "        for (let j = 0; j < 5; j++) {{\n",
        "            html += '<td>&nbsp;</td>';\n",
        "        }}\n",
        "        html += '</tr>';\n",
        "    }}\n",
        "    html += '</tbody>';\n",
        "    html += '</table>';\n",
        "    html += '</div>';\n",
        "    \n",
        "    detailContent.innerHTML = html;\n",
        "    document.querySelector('.marine-list-wrapper').style.display = 'none';\n",
        "    document.querySelector('.search-controls').style.display = 'none';\n",
        "    detailView.style.display = 'block';\n",
        "}}\n",
        "\n",
        "function hideDetails() {{\n",
        "    const detailView = document.getElementById('detailView');\n",
        "    const listWrapper = document.querySelector('.marine-list-wrapper');\n",
        "    const searchControls = document.querySelector('.search-controls');\n",
        "    \n",
        "    if (detailView) detailView.style.display = 'none';\n",
        "    if (listWrapper) listWrapper.style.display = 'block';\n",
        "    if (searchControls) searchControls.style.display = 'flex';\n",
        "}}\n",
        "</script>\n",
        "\"\"\"\n",
        "\n",
        "display(HTML(js_code))"
      ],
      "id": "d7ccd330",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Data Export"
      ],
      "id": "7a4cff0f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "if not df.empty:\n",
        "    display(HTML(\"\"\"\n",
        "<div class=\"export-section\">\n",
        "    <h3>Export Data</h3>\n",
        "    <button onclick=\"exportToCSV()\" class=\"export-button\">Download as CSV</button>\n",
        "</div>\n",
        "\n",
        "<script>\n",
        "function exportToCSV() {\n",
        "    const headers = allColumns;\n",
        "    let csvContent = headers.join(',') + '\\\\n';\n",
        "    \n",
        "    marineData.forEach(row => {\n",
        "        const values = headers.map(header => {\n",
        "            const value = row[header] || '';\n",
        "            return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n",
        "        });\n",
        "        csvContent += values.join(',') + '\\\\n';\n",
        "    });\n",
        "    \n",
        "    const blob = new Blob([csvContent], { type: 'text/csv' });\n",
        "    const url = window.URL.createObjectURL(blob);\n",
        "    const a = document.createElement('a');\n",
        "    a.href = url;\n",
        "    a.download = 'marine_planning.csv';\n",
        "    document.body.appendChild(a);\n",
        "    a.click();\n",
        "    document.body.removeChild(a);\n",
        "    window.URL.revokeObjectURL(url);\n",
        "}\n",
        "</script>\n",
        "    \"\"\"))"
      ],
      "id": "a1d8b812",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\ElinsonM\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}