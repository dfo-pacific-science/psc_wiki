{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Stock Management Unit Profiles\"\n",
        "format: \n",
        "  html:\n",
        "    css: ../assets/css/smu_profiles.css\n",
        "    toc: true\n",
        "    toc-depth: 2\n",
        "    code-fold: true\n",
        "execute:\n",
        "  echo: false\n",
        "  warning: false\n",
        "  message: false\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "df36a1e3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from IPython.display import HTML, display\n",
        "import json\n",
        "\n",
        "# Read the Excel file\n",
        "try:\n",
        "    import os\n",
        "    file_path = '../assets/data/smu_profiles.xlsx'\n",
        "    print(f\"Attempting to read file: {file_path}\")\n",
        "    print(f\"File exists: {os.path.exists(file_path)}\")\n",
        "    print(f\"File is readable: {os.access(file_path, os.R_OK)}\")\n",
        "    \n",
        "    df = pd.read_excel(file_path)\n",
        "    print(f\"Successfully loaded {len(df)} SMU records\")\n",
        "except PermissionError as e:\n",
        "    print(f\"Permission error: {e}\")\n",
        "    print(\"The file might be open in Excel or another application.\")\n",
        "    print(\"Attempting to read with alternative method...\")\n",
        "    try:\n",
        "        # Try reading with openpyxl engine explicitly\n",
        "        df = pd.read_excel(file_path, engine='openpyxl')\n",
        "        print(f\"Successfully loaded {len(df)} SMU records using alternative method\")\n",
        "    except Exception as e2:\n",
        "        print(f\"Alternative method also failed: {e2}\")\n",
        "        df = pd.DataFrame()\n",
        "except FileNotFoundError as e:\n",
        "    print(f\"File not found: {e}\")\n",
        "    df = pd.DataFrame()\n",
        "except Exception as e:\n",
        "    print(f\"Error loading data: {e}\")\n",
        "    print(f\"Error type: {type(e).__name__}\")\n",
        "    df = pd.DataFrame()"
      ],
      "id": "c08f2bba",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Overview\n",
        "\n",
        "This page contains profiles of **{{< meta title >}}** for Pacific salmon conservation. The data includes information on `{python} len(df) if not df.empty else 0` stock management units."
      ],
      "id": "d2937394"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: asis\n",
        "\n",
        "# if not df.empty:\n",
        "#     # Clean up the data\n",
        "#     df = df.fillna('N/A')\n",
        "    \n",
        "#     # Get summary statistics\n",
        "#     species_counts = df['species'].value_counts() if 'species' in df.columns else pd.Series()\n",
        "    \n",
        "#     print(\"### Data Summary\")\n",
        "#     print(f\"- **Total SMUs:** {len(df)}\")\n",
        "#     if not species_counts.empty:\n",
        "#         print(f\"- **Species represented:** {len(species_counts)}\")\n",
        "#         for species, count in species_counts.head(5).items():\n",
        "#             print(f\"  - {species}: {count} SMUs\")\n",
        "# else:\n",
        "#     print(\"No data available.\")"
      ],
      "id": "a7033f73",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Search and Filter"
      ],
      "id": "945f7fbb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from IPython.display import HTML\n",
        "\n",
        "# Always display search controls, even if no data\n",
        "display(HTML(\"\"\"\n",
        "<div class=\"search-controls\">\n",
        "    <input type=\"text\" id=\"searchInput\" placeholder=\"Search SMUs...\" onkeyup=\"filterTable()\">\n",
        "    <select id=\"speciesFilter\" onchange=\"filterTable()\">\n",
        "        <option value=\"\">All Species</option>\n",
        "    </select>\n",
        "    <select id=\"regionFilter\" onchange=\"filterTable()\">\n",
        "        <option value=\"\">All Regions</option>\n",
        "    </select>\n",
        "</div>\n",
        "\"\"\"))\n",
        "\n",
        "if df.empty:\n",
        "    display(HTML(\"\"\"\n",
        "    <p>No data to display.</p>\n",
        "    <div class=\"table-wrapper\" style=\"display: none;\">\n",
        "        <table id=\"smuTable\" class=\"display-table\">\n",
        "            <thead><tr><th>No Data</th></tr></thead>\n",
        "            <tbody></tbody>\n",
        "        </table>\n",
        "    </div>\n",
        "    \"\"\"))"
      ],
      "id": "eaf18d5a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## SMU Data Table\n",
        "###### Click each row to view details"
      ],
      "id": "c2a5cdb9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "if not df.empty:\n",
        "    # Select key columns for the main table\n",
        "    display_columns = []\n",
        "    possible_columns = [\n",
        "        'SMU Name', 'Species', 'Region', \n",
        "        'No. CUs', 'SMU Status',\n",
        "        'Avg. Abundance', 'Avg. Catch', 'Avg. ER'\n",
        "    ]\n",
        "    \n",
        "    for col in possible_columns:\n",
        "        if col in df.columns:\n",
        "            display_columns.append(col)\n",
        "    \n",
        "    if display_columns:\n",
        "        display_df = df[display_columns].copy()\n",
        "        \n",
        "        # Debug: print column info\n",
        "        # print(f\"Display columns: {display_columns}\")\n",
        "        # print(f\"Data shape: {display_df.shape}\")\n",
        "        \n",
        "        # Create HTML table with proper styling and IDs\n",
        "        html_table = '<div class=\"table-wrapper\">\\n'\n",
        "        html_table += '<table id=\"smuTable\" class=\"display-table\">\\n'\n",
        "        html_table += '<thead>\\n<tr>\\n'\n",
        "        \n",
        "        for col in display_columns:\n",
        "            html_table += f'<th>{col}</th>\\n'\n",
        "        html_table += '</tr>\\n</thead>\\n<tbody>\\n'\n",
        "        \n",
        "        for idx, row in display_df.iterrows():\n",
        "            html_table += f'<tr onclick=\"showDetails({idx})\" class=\"clickable-row\">\\n'\n",
        "            for col in display_columns:\n",
        "                # Escape HTML characters and handle NaN values\n",
        "                value = str(row[col]) if pd.notna(row[col]) else 'N/A'\n",
        "                # Basic HTML escaping\n",
        "                value = value.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;')\n",
        "                html_table += f'<td>{value}</td>\\n'\n",
        "            html_table += '</tr>\\n'\n",
        "        \n",
        "        html_table += '</tbody>\\n</table>\\n</div>'\n",
        "        \n",
        "        # Debug: print first few characters of HTML\n",
        "        # print(f\"HTML table preview: {html_table[:200]}...\")\n",
        "        \n",
        "        display(HTML(html_table))\n",
        "    else:\n",
        "        display(HTML(\"<p>No suitable columns found for display.</p>\"))\n",
        "else:\n",
        "    display(HTML(\"<p>No data to display.</p>\"))"
      ],
      "id": "987ceb15",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Always display the detail view HTML elements\n",
        "display(HTML('''\n",
        "<div id=\"detailView\" style=\"display: none;\">\n",
        "    <button onclick=\"hideDetails()\" class=\"back-button\">‚Üê Back to Table</button>\n",
        "    <div id=\"detailContent\"></div>\n",
        "</div>\n",
        "'''))"
      ],
      "id": "0019e7db",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create JavaScript data object - always define, even if empty\n",
        "import json\n",
        "\n",
        "if not df.empty:\n",
        "    df_json = df.to_json(orient='records')\n",
        "    columns_list = json.dumps(list(df.columns))\n",
        "else:\n",
        "    df_json = \"[]\"\n",
        "    columns_list = \"[]\"\n",
        "\n",
        "js_code = f\"\"\"\n",
        "<script>\n",
        "const smuData = {df_json};\n",
        "const allColumns = {columns_list};\n",
        "\n",
        "// Populate species and region filters\n",
        "window.addEventListener('DOMContentLoaded', function() {{\n",
        "    const speciesFilter = document.getElementById('speciesFilter');\n",
        "    const regionFilter = document.getElementById('regionFilter');\n",
        "    \n",
        "    if (speciesFilter && smuData && smuData.length > 0) {{\n",
        "        const species = [...new Set(smuData.map(item => item.Species || item.species).filter(s => s && s !== 'N/A'))].sort();\n",
        "        species.forEach(s => {{\n",
        "            const option = document.createElement('option');\n",
        "            option.value = s;\n",
        "            option.textContent = s;\n",
        "            speciesFilter.appendChild(option);\n",
        "        }});\n",
        "    }}\n",
        "    \n",
        "    if (regionFilter && smuData && smuData.length > 0) {{\n",
        "        const regions = [...new Set(smuData.map(item => item.Region || item.region).filter(r => r && r !== 'N/A'))].sort();\n",
        "        regions.forEach(r => {{\n",
        "            const option = document.createElement('option');\n",
        "            option.value = r;\n",
        "            option.textContent = r;\n",
        "            regionFilter.appendChild(option);\n",
        "        }});\n",
        "    }}\n",
        "}});\n",
        "\n",
        "function filterTable() {{\n",
        "    const searchTerm = document.getElementById('searchInput').value.toLowerCase();\n",
        "    const speciesFilter = document.getElementById('speciesFilter').value;\n",
        "    const regionFilter = document.getElementById('regionFilter').value;\n",
        "    const table = document.getElementById('smuTable');\n",
        "    const rows = table.getElementsByTagName('tr');\n",
        "    \n",
        "    // Get column indices for Species and Region\n",
        "    const headerRow = table.getElementsByTagName('tr')[0];\n",
        "    const headers = Array.from(headerRow.getElementsByTagName('th')).map(th => th.textContent);\n",
        "    const speciesIndex = headers.findIndex(h => h === 'Species' || h === 'species');\n",
        "    const regionIndex = headers.findIndex(h => h === 'Region' || h === 'region');\n",
        "    \n",
        "    for (let i = 1; i < rows.length; i++) {{\n",
        "        const row = rows[i];\n",
        "        const cells = row.getElementsByTagName('td');\n",
        "        let showRow = true;\n",
        "        \n",
        "        // Search filter\n",
        "        if (searchTerm) {{\n",
        "            let found = false;\n",
        "            for (let j = 0; j < cells.length; j++) {{\n",
        "                if (cells[j].textContent.toLowerCase().includes(searchTerm)) {{\n",
        "                    found = true;\n",
        "                    break;\n",
        "                }}\n",
        "            }}\n",
        "            if (!found) showRow = false;\n",
        "        }}\n",
        "        \n",
        "        // Species filter\n",
        "        if (speciesFilter && speciesIndex >= 0 && cells.length > speciesIndex) {{\n",
        "            if (cells[speciesIndex].textContent !== speciesFilter) {{\n",
        "                showRow = false;\n",
        "            }}\n",
        "        }}\n",
        "        \n",
        "        // Region filter\n",
        "        if (regionFilter && regionIndex >= 0 && cells.length > regionIndex) {{\n",
        "            if (cells[regionIndex].textContent !== regionFilter) {{\n",
        "                showRow = false;\n",
        "            }}\n",
        "        }}\n",
        "        \n",
        "        row.style.display = showRow ? '' : 'none';\n",
        "    }}\n",
        "}}\n",
        "\n",
        "function showDetails(index) {{\n",
        "    // Safety checks\n",
        "    if (!smuData || smuData.length === 0 || index >= smuData.length || index < 0) {{\n",
        "        console.error('Invalid data or index for showDetails');\n",
        "        return;\n",
        "    }}\n",
        "    \n",
        "    const smu = smuData[index];\n",
        "    const detailView = document.getElementById('detailView');\n",
        "    const detailContent = document.getElementById('detailContent');\n",
        "    const table = document.getElementById('smuTable');\n",
        "    \n",
        "    if (!smu || !detailView || !detailContent) return;\n",
        "    \n",
        "    let html = `<h2>${{smu['SMU Name'] || 'SMU Profile'}}</h2>`;\n",
        "    \n",
        "    // Basic Information\n",
        "    html += '<div class=\"detail-section\"><h3><i>Basic Information</i></h3><div class=\"info-grid\">';\n",
        "    const basicFields = ['Species', 'Region', 'No. CUs', 'Avg. Abundance', 'Avg. Catch', 'Avg. ER', 'SMU Status', 'PST Chapter', 'FN Treaty', 'FSP Batch Status'];\n",
        "         basicFields.forEach(field => {{\n",
        "         if (allColumns.includes(field)) {{\n",
        "             html += `<div class=\"info-item\"><label>${{field}}:</label><span>${{smu[field] || 'N/A'}}</span></div>`;\n",
        "         }}\n",
        "     }});\n",
        "    html += '</div><br></div>';\n",
        "    \n",
        "    // Life History\n",
        "    html += '<div class=\"detail-section\"><h3><i>Life History</i></h3><div class=\"info-grid\">';\n",
        "    const popFields = ['Run Timing', 'Freshwater Life History', 'Ocean Migration', 'Age at Return'];\n",
        "         popFields.forEach(field => {{\n",
        "         if (allColumns.includes(field)) {{\n",
        "             html += `<div class=\"info-item\"><label>${{field}}:</label><span>${{smu[field] || 'N/A'}}</span></div>`;\n",
        "         }}\n",
        "     }});\n",
        "    html += '</div><br></div>';\n",
        "    \n",
        "    // Management & Harvest\n",
        "    html += '<div class=\"detail-section\"><h3><i>Management & Harvest</i></h3><div class=\"info-grid\">';\n",
        "    const mgmtFields = ['Harvest Control Rules', 'Hatchery Management Framework', 'Sampling Framework'];\n",
        "         mgmtFields.forEach(field => {{\n",
        "         if (allColumns.includes(field)) {{\n",
        "             html += `<div class=\"info-item\"><label>${{field}}:</label><span>${{smu[field] || 'N/A'}}</span></div>`;\n",
        "         }}\n",
        "     }});\n",
        "    html += '</div><br></div>';\n",
        "    \n",
        "    // Reference Points\n",
        "    html += '<div class=\"detail-section\"><h3><i>Reference Points</i></h3><div class=\"info-grid\">';\n",
        "    const addFields = ['LRP', 'USR', 'RR', 'FRP-L', 'FRP-U'];\n",
        "         addFields.forEach(field => {{\n",
        "         if (allColumns.includes(field)) {{\n",
        "             html += `<div class=\"info-item\"><label>${{field}}:</label><span>${{smu[field] || 'N/A'}}</span></div>`;\n",
        "         }}\n",
        "     }});\n",
        "    html += '</div><br></div>';\n",
        "\n",
        "         //Data Collected\n",
        "     html += '<div class=\"detail-section\"><h3><i>Data Collected</i></h3>';\n",
        "     html += '<table class=\"data-collected-table\">';\n",
        "     html += '<tbody>';\n",
        "     for (let i = 0; i < 3; i++) {{\n",
        "         html += '<tr>';\n",
        "         for (let j = 0; j < 5; j++) {{\n",
        "             html += '<td>&nbsp;</td>';\n",
        "         }}\n",
        "         html += '</tr>';\n",
        "     }}\n",
        "     html += '</tbody>';\n",
        "     html += '</table>';\n",
        "     html += '</div>';\n",
        "    \n",
        "    // FSAR Assessment\n",
        "    if (smu['FSAR - last assessment'] && smu['FSAR - last assessment'] !== 'N/A') {{\n",
        "        html += '<div class=\"detail-section\"><h3><i>FSAR Assessment</i></h3>';\n",
        "        html += `<p><strong>Last Assessment:</strong> <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">${{smu['FSAR - last assessment']}}</a></p>`;\n",
        "        html += '</div>';\n",
        "    }}\n",
        "\n",
        "         // Maps\n",
        "     html += '<div class=\"detail-section\"><h3><i>Maps</i></h3>';\n",
        "     html += '<div class=\"maps-container\">';\n",
        "     const mapTypes = ['FW Spawning', 'Marine Distribution', 'Fishery Impacts'];\n",
        "     mapTypes.forEach(mapType => {{\n",
        "         html += `<div class=\"map-item\">`;\n",
        "         html += `<h4>${{mapType}}</h4>`;\n",
        "         html += `<div class=\"map-placeholder\">`;\n",
        "         html += `<div class=\"map-placeholder-content\">`;\n",
        "         html += `<p>Map Placeholder</p>`;\n",
        "         html += `<p>${{mapType}} map will be displayed here</p>`;\n",
        "         html += `</div></div></div>`;\n",
        "     }});\n",
        "     html += '</div></div>';\n",
        "    \n",
        "    detailContent.innerHTML = html;\n",
        "    document.querySelector('.table-wrapper').style.display = 'none';\n",
        "    document.querySelector('.search-controls').style.display = 'none';\n",
        "    detailView.style.display = 'block';\n",
        "}}\n",
        "\n",
        "function hideDetails() {{\n",
        "    const detailView = document.getElementById('detailView');\n",
        "    const tableWrapper = document.querySelector('.table-wrapper');\n",
        "    const searchControls = document.querySelector('.search-controls');\n",
        "    \n",
        "    if (detailView) detailView.style.display = 'none';\n",
        "    if (tableWrapper) tableWrapper.style.display = 'block';\n",
        "    if (searchControls) searchControls.style.display = 'flex';\n",
        "}}\n",
        "</script>\n",
        "    \"\"\"\n",
        "\n",
        "display(HTML(js_code))"
      ],
      "id": "4b6ee214",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Data Export"
      ],
      "id": "a434e170"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "if not df.empty:\n",
        "    display(HTML(\"\"\"\n",
        "<div class=\"export-section\">\n",
        "    <h3>Export Data</h3>\n",
        "    <button onclick=\"exportToCSV()\" class=\"export-button\">Download as CSV</button>\n",
        "</div>\n",
        "\n",
        "<script>\n",
        "function exportToCSV() {\n",
        "    const headers = allColumns;\n",
        "    let csvContent = headers.join(',') + '\\\\n';\n",
        "    \n",
        "    smuData.forEach(row => {\n",
        "        const values = headers.map(header => {\n",
        "            const value = row[header] || '';\n",
        "            return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n",
        "        });\n",
        "        csvContent += values.join(',') + '\\\\n';\n",
        "    });\n",
        "    \n",
        "    const blob = new Blob([csvContent], { type: 'text/csv' });\n",
        "    const url = window.URL.createObjectURL(blob);\n",
        "    const a = document.createElement('a');\n",
        "    a.href = url;\n",
        "    a.download = 'smu_profiles.csv';\n",
        "    document.body.appendChild(a);\n",
        "    a.click();\n",
        "    document.body.removeChild(a);\n",
        "    window.URL.revokeObjectURL(url);\n",
        "}\n",
        "</script>\n",
        "    \"\"\"))"
      ],
      "id": "0acf8983",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary Statistics"
      ],
      "id": "2535b1a3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "if not df.empty:\n",
        "    # Create summary visualizations if possible\n",
        "    import matplotlib.pyplot as plt\n",
        "    import seaborn as sns\n",
        "    \n",
        "    # Set style\n",
        "    plt.style.use('default')\n",
        "    sns.set_palette(\"husl\")\n",
        "    \n",
        "    # Species distribution\n",
        "    if 'Species' in df.columns:\n",
        "        fig, ax = plt.subplots(figsize=(10, 6))\n",
        "        species_counts = df['Species'].value_counts()\n",
        "        species_counts.plot(kind='bar', ax=ax)\n",
        "        ax.set_title('Distribution of SMUs by Species')\n",
        "        ax.set_xlabel('Species')\n",
        "        ax.set_ylabel('Number of SMUs')\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "    \n",
        "    # Status distribution if available\n",
        "    status_col = 'Status / Trend (last assessment)'\n",
        "    if status_col in df.columns:\n",
        "        status_counts = df[status_col].value_counts()\n",
        "        if len(status_counts) > 1:\n",
        "            fig, ax = plt.subplots(figsize=(8, 6))\n",
        "            status_counts.plot(kind='pie', ax=ax, autopct='%1.1f%%')\n",
        "            ax.set_title('SMU Status Distribution')\n",
        "            ax.set_ylabel('')\n",
        "            plt.tight_layout()\n",
        "            plt.show()"
      ],
      "id": "c67451ad",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\ElinsonM\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}